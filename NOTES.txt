To Do:
* Map more closely to FIX messages
  * use quickfixgo
* support "subscribing" to executions from an exchange (and "executions"
  should correspond to the data feed from an exchange, so maybe quotes too)
* calculate market NBBO, spread, other metrics

Ideas:
* support inter-exchange connections similar to NYSE vs. BATS
* build variable-delay order channels
* figure out a way to create random information about a symbol and build algos
  around it

<<<<<<< HEAD

Order book example:

Id   Side    Time   Qty   Price   Qty    Time   Side  
---+------+-------+-----+-------+-----+-------+------
#3                        20.30   200   09:05   SELL  
#1                        20.30   100   09:01   SELL  
#2                        20.25   100   09:03   SELL  
#5   BUY    09:08   200   20.20                       
#4   BUY    09:06   100   20.15                       
#6   BUY    09:09   200   20.15  

time orders reversed for different sides, but sorted by price

Market orders have no price control

Limit orders limit price, but can be "marketable"
  Can also be FOK (like market, but price stipulated) or AON (all or none)

"aggressor" vs. "resting" order

Build components which take incoming messages and can be given an arbitrary
set of outgoing bindings.  All of these should be exchanged in a simple but
extensible datatype.

Build an "exchange" component which maintains an LOB, takes mesages to manage
LO's and BO's, and sends status updates as events occur.

Build other utility components:
  wye (make copies of a mesage)
  http (allow incoming messages via HTTP post)
  fix-tcp (allow outgoing messages in FIX format over raw TCP)
  fix-websocket (FIX via WS)
  json-tcp (allow outgoing messages in JSON format over raw TCP)
  json-websocket (JSON via WS)
  delay (delay messages)

Build a registry for components' inputs to help with discovery

Build a way to create and wire up components based on a text file of some sort
